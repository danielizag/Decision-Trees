phys_intg <- physical(mydata, pos_intg)
phys_intg <- physical(mydata, pos_intg)
physical <- function(arg0,arg1){
tied <- arg1[2:3]
names <- get_name(arg0,tied)
phys_score <- arg0[names,"PHYS"]
phys_names <- get_name(arg0,phys_score)
if(phys_score[1]<phys_score[2]){
temp = phys_score[1]
phys_score[1]=phys_score[2]
phys_score[2]=temp
phys_names <- get_name(arg0, phys_score)
return(phys_names)
}
else{
return (phys_names)
}
}
phys_intg <- physical(mydata, pos_intg)
judges_ranks["INTG",2:3] <- phys_intg
phys_dmnr <- physical(mydata, pos_dmnr)
judges_ranks["DMNR", 2:3] <- phys_dmnr
judges_ranks["RTEN", 2:3] <- phys_rten
phys_rten <- physical(mydata, pos_rten)
judges_ranks["RTEN", 2:3] <- phys_rten
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(judges_ranks)
physical <- function(arg0,arg1){
tied <- arg1[2:3]
names <- get_name(arg0,tied)
phys_score <- arg0[names,"PHYS"]
phys_names <- get_name(arg0,phys_score)
if(phys_score[1]<phys_score[2]){
temp = phys_score[1]
phys_score[1]=phys_score[2]
temp = phys_score[2]
phys_names <- get_name(arg0, phys_score)
return(phys_names)
}
else{
return (phys_names)
}
}
phys_rten <- physical(mydata, pos_rten)
judges_ranks["RTEN", 2:3] <- phys_rten
phys_rten <- physical(mydata, pos_rten)
judges_ranks["RTEN", 2:3] <- phys_rten
pos_rten <- order_judge_pos(mydata,"RTEN")
pos_rten
View(mydata)
pos_rten <- order_judge_pos(mydata,"RTEN")
judges_ranks["RTEN", "1st"] <- get_name(mydata,pos_rten[1])
judges_ranks["RTEN", "1st"] <- get_name(mydata,pos_rten)
judges_ranks["RTEN",] <- get_name(mydata,pos_rten)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(judges_ranks)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(mydata)
View(judges_ranks)
max(judges_ranks[,"1st"])
best_judge <- max(judges_ranks[,"1st"])
best_judge
phys_score <- order(arg0[names,"PHYS"])
physical <- function(arg0,arg1){
tied <- arg1[2:3]
names <- get_name(arg0,tied)
phys_score <- order(arg0[names,"PHYS"])
phys_names <- get_name(arg0,phys_score)
return (phys_names)
}
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
val_intg <- special_sort_judge(mydata,"INTG")
special_sort_judge <- function(arg0,arg1){
mysort <- sort(arg0[,arg1], decreasing = TRUE)
val_vec <- myorder[1:4]
return (val_vec)
}
val_intg <- special_sort_judge(mydata,"INTG")
special_sort_judge <- function(arg0,arg1){
mysort <- sort(arg0[,arg1], decreasing = TRUE)
val_vec <- mysort[1:4]
return (val_vec)
}
val_intg <- special_sort_judge(mydata,"INTG")
val_dmnr <- special_sort_judge(mydata,"DMNR")
val_dmnr <- extra_special_sort_judge(mydata,"DMNR")
extra_special_sort_judge <- function(arg0,arg1){
mysort <- sort(arg0[,arg1], decreasing = TRUE)
val_vec <- mysort[1:5]
return (val_vec)
}
val_dmnr <- extra_special_sort_judge(mydata,"DMNR")
val_rten <- special_sort_judge(mydata,"RTEN")
val_intg <- special_sort_judge(mydata,"INTG")
val_intg <- extra_special_sort_judge(mydata,"INTG")
val_cfmg <- special_sort_judge(mydata,"CMFG")
val_cfmg <- special_sort_judge(mydata,"CMFG")
val_cfmg <- special_sort_judge(mydata,"CFMG")
val_cfmg <- extra_special_sort_judge(mydata,"CFMG")
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(judges_ranks)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(judges_ranks)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
val_cont <- special_sort_judge(mydata,"CONT")
val_deci <- special_sort_judge(mydata,"DECI")
val_deci <- extra_special_sort_judge(mydata,"DECI")
extra_special_sort_judge <- function(arg0,arg1){
mysort <- sort(arg0[,arg1], decreasing = TRUE)
val_vec <- mysort[1:6]
return (val_vec)
}
val_deci <- extra_special_sort_judge(mydata,"DECI")
deci_special_sort_judge<- function(arg0,arg1){
mysort <- sort(arg0[,arg1], decreasing = TRUE)
val_vec <- mysort[1:6]
return (val_vec)
}
val_deci <- deci_special_sort_judge(mydata,"DECI")
deci_special_sort_judge<- function(arg0,arg1){
mysort <- sort(arg0[,arg1], decreasing = TRUE)
val_vec <- mysort[1:7]
return (val_vec)
}
val_deci <- deci_special_sort_judge(mydata,"DECI")
deci_special_sort_judge<- function(arg0,arg1){
mysort <- sort(arg0[,arg1], decreasing = TRUE)
val_vec <- mysort[1:8]
return (val_vec)
}
val_deci <- deci_special_sort_judge(mydata,"DECI")
pos_deci <- order_judge_pos(mydata,"DECI")
judges_ranks["DECI",1:2] <- get_name(mydata,pos_deci[1:2])
pos_special_deci <- deci_special_order_pos(mydata,"DECI")
deci_special_order_pos<- function(arg0,arg1){
myorder <- order(arg0[,arg1], decreasing = TRUE)
pos_vec <- myorder[1:7]
return (pos_vec)
}
pos_special_deci <- deci_special_order_pos(mydata,"DECI")
phys_deci <- deci_physical(mydata,pos_special_deci)
deci_physical <- function(arg0,arg1){ # for 3rd place ties
tied <- arg1[3:7]
names <- get_name(arg0,tied)
phys_score <- order(arg0[names,"PHYS"])
phys_names <- get_name(arg0,phys_score)
return (phys_names[1])
}
phys_deci <- deci_physical(mydata,pos_special_deci)
phys_deci_special <- deci_physical(mydata,pos_special_deci)
judges_ranks["DECI", 3] <- phys_deci_special
val_deci <- deci_special_sort_judge(mydata,"DECI") # Definitely not ok, 5 tied for 3rd
val_fami <- special_sort_judge(mydata,"FAMI")
val_dilg <- special_sort_judge(mydata,"DILG")
pos_dilg <- order_judge_pos(mydata,"DILG")
judges_ranks["DILG",1] <- get_name(mydata,pos_dilg[1])
pos_dilg <- order_judge_pos(mydata,"DILG")
judges_ranks["DILG",] <- get_name(mydata,pos_dilg)
val_oral <- special_sort_judge(mydata,"ORAL")
val_phys <- special_sort_judge(mydata,"PHYS")
val_prep <- special_sort_judge(mydata,"PREP")
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(judges_ranks)
paste("That judge",best_judge, ", he's a pretty good judge"
paste("That judge",best_judge, ", he's a pretty good judge")
paste("That judge",best_judge, ", he's a pretty good judge")
paste("That judge",best_judge, ", is a pretty good judge")
paste("That judge",best_judge, "is a pretty good judge")
paste("That judge",best_judge,"is a pretty good judge")
phys_dmnr <- physical(mydata, pos_dmnr)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(mydata)
View(judges_ranks)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(judges_ranks)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(judges_ranks)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 1/Project 1.R', echo=TRUE)
View(judges_ranks)
GenUnifSamples(5, 10)
GenUnifSamples <- function(size, num_samp){
r_samples <- c()
for (i in size){
r <- runif(num_samp, min = 1, max = 10)
}
return (r_samples)
}
GenUnifSamples(5, 10)
GenUnifSamples <- function(size, num_samp){
r_samples <- c()
for (i in size){
r_samples <- runif(num_samp, min = 1, max = 10)
}
return (r_samples)
}
GenUnifSamples(5, 10)
samp4 <- runif(100000, min = 1, max = 10)
GenUnifSamples <- function(size, num_samp){
r_samples <- list()
for (i in size){
samp <- runif(num_samp, min = 1, max = 10)
r_samples <- samp
}
return (r_samples)
}
GenUnifSamples(5, 10)
GenUnifSamples(10, 10)
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 2/Project2_DI.R', echo=TRUE)
GenUnifSamples(10, 100)
GenNormSamples(10, 100)
GenNormSamples <- function(size, num_samp){
r_samples <- list()
for (i in size){
samp <- rnorm(num_samp, min = 1, max = 10)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenNormSamples(10, 100)
GenNormSamples(10, 100)
GenNormSamples <- function(size, num_samp){
r_samples <- list()
for (i in size){
samp <- rnorm(num_samp)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenNormSamples(10, 100)
GenExpSamples <- function(size, num_samp){
r_samples <- list()
for (i in size){
samp <- rexp(num_samp)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenExpSamples(10,100)
GenUnifSamples <- function(size, num_samp){
r_samples <- list()
for (i in size){
samp <- runif(num_samp, min = 1, max = 10)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenNormSamples <- function(size, num_samp){
r_samples <- list()
for (i in size){
samp <- rnorm(num_samp)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenExpSamples <- function(size, num_samp){
r_samples <- list()
for (i in size){
samp <- rexp(num_samp)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenUnifSamples(10, 100)
GenNormSamples(10, 100)
GenExpSamples(10,100)
# Daniel Izaguirre
# Project 2
# Dr. Spence
# Data Science, 3900
GenUnifSamples <- function(size, num_samp){
num_samp = 100
r_samples <- list()
for (i in size){
samp <- runif(num_samp, min = 1, max = 10)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenNormSamples <- function(size, num_samp){
num_samp = 100
r_samples <- list()
for (i in size){
samp <- rnorm(num_samp)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenExpSamples <- function(size, num_samp){
num_samp = 100
r_samples <- list()
for (i in size){
samp <- rexp(num_samp)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenUnifSamples(10)
GenNormSamples(10)
GenExpSamples(10)
GenExpSamples <- function(size, num_samp){
num_samp = 10000
r_samples <- list()
for (i in size){
samp <- rexp(num_samp, rate = 1)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenExpSamples(10)
GenUnifSamples <- function(size, num_samp){
num_samp = 10000
r_samples <- list()
for (i in size){
samp <- runif(num_samp, min = 1, max = 10)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenNormSamples <- function(size, num_samp){
num_samp = 10000
r_samples <- list()
for (i in size){
samp <- rnorm(num_samp)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
GenExpSamples <- function(size, num_samp){
num_samp = 10000
r_samples <- list()
for (i in size){
samp <- rexp(num_samp, rate = 1)
means <- sapply(samp,mean)
r_samples <- means
}
return (r_samples)
}
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 2/Project2_DI.R', echo=TRUE)
setwd("C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 2")
##### Uniform distribution histogram of those #2c sample means
jpeg(file= "5 Uniform Distribution Sample Means.jpg")
hist(us_5, main = "Uniform Distribution Sample of Means", xlab = "Sample of Size 5")
dev.off()
jpeg(file= "25 Uniform Distribution Sample Means.jpg")
hist(us_25, main = "Uniform Distribution Sample of Means", xlab = "Sample of Size 25")
dev.off()
jpeg(file= "500 Uniform Distribution Sample Means.jpg")
hist(us_500, main = "Uniform Distribution Sample of Means", xlab = "Sample of Size 500")
dev.off()
##### Normal distribution histogram of those #2c sample means
jpeg(file= "5 Normal Distribution Sample Means.jpg")
hist(ns_5, main = "Normal Distribution Sample of Means", xlab = "Sample of Size 5")
dev.off()
jpeg(file= "25 Normal Distribution Sample Means.jpg")
hist(ns_25, main = "Normal Distribution Sample ofMeans", xlab = "Sample of Size 25")
dev.off()
jpeg(file= "500 Normal Distribution Sample Means.jpg")
hist(ns_500, main = "Normal Distribution Sample of Means", xlab = "Sample of Size 500")
dev.off()
##### Exponential distribution histogram of those #2c sample means
jpeg(file= "5 Exponential Distribution Sample Means.jpg")
hist(es_5, main = "Exponential Distribution Sample of Means", xlab = "Sample of Size 5")
dev.off()
jpeg(file= "25 Exponential Distribution Sample Means.jpg")
hist(es_25, main = "Exponential Distribution Sample of Means", xlab = "Sample of Size 25")
dev.off()
jpeg(file= "500 Exponential Distribution Sample Means.jpg")
hist(es_500, main = "Exponential Distribution Sample of Means", xlab = "Sample of Size 500")
dev.off()
setwd("C:/Users/Daniel Izaguirre/Desktop/Data Science")
source('C:/Users/Daniel Izaguirre/Desktop/Data Science/Project 2/Project2_DI.R', echo=TRUE)
install.packages("rpart")
library("ggplot2")
library("randomForest")
library("dplyr")
library("rattle")
# Describe the data
hr <- read.csv("HR_comma_sep.csv")
hr$type <- hr$sales
hr$sales <- NULL
View(head(hr))
setwd("C:/Users/Daniel Izaguirre/Desktop/Intelligent Systems/Final Project")
library("ggplot2")
library("dplyr")
library("randomForest")
library("rattle")
# Describe the data
hr <- read.csv("HR_comma_sep.csv")
hr$type <- hr$sales
hr$sales <- NULL
View(head(hr))
set.seed(3792)
inTraining <- createDataPartition(y=hr$left, p=0.6, list=FALSE)
trainingData <- hr[inTraining,]
testData <- hr[-inTraining,]
# Run the training data with the Decision Tree method.
hrModel <- train(salary~., data=trainingData, method="rpart")
library("ggplot2")
library("dplyr")
library("randomForest")
library("rattle")
# Describe the data
hr <- read.csv("HR_comma_sep.csv")
hr$type <- hr$sales
hr$sales <- NULL
View(head(hr))
set.seed(3792)
inTraining <- createDataPartition(y=hr$left, p=0.6, list=FALSE)
library("caret")
inTraining <- createDataPartition(y=hr$left, p=0.6, list=FALSE)
set.seed(3792)
inTraining <- createDataPartition(y=hr$left, p=0.6, list=FALSE)
trainingData <- hr[inTraining,]
testData <- hr[-inTraining,]
# Run the training data with the Decision Tree method.
hrModel <- train(salary~., data=trainingData, method="rpart")
hrModel
fancyRpartPlot(hrModel$finalModel)
library("ggplot2")
library("dplyr")
library("randomForest")
library("rattle")
library("caret")
library("ggplot2")
library("dplyr")
library("randomForest")
library("rattle")
library("caret")
library("rpart")
# Describe the data
hr <- read.csv("HR_comma_sep.csv")
hr$type <- hr$sales
hr$sales <- NULL
View(head(hr))
set.seed(3792)
inTraining <- createDataPartition(y=hr$left, p=0.6, list=FALSE)
trainingData <- hr[inTraining,]
testData <- hr[-inTraining,]
# Run the training data with the Decision Tree method.
hrModel <- train(salary~., data=trainingData, method="rpart")
hrModel
# Plot the tree and text.
plot(hrModel$finalModel, uniform=TRUE, main="Employee Turnover Decision Tree")
text(hrModel$finalModel, use.n = TRUE, all = TRUE, cex=0.65)
fancyRpartPlot(hrModel$finalModel)
library(rattle)
fancyRpartPlot(hrModel$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
fancyRpartPlot(hrModel$finalModel)
set.seed(3792)
inTraining <- createDataPartition(y=hr$salary, p=0.6, list=FALSE)
trainingData <- hr[inTraining,]
testData <- hr[-inTraining,]
hrModel <- train(salary~., data=trainingData, method="rpart")
hrModel
fancyRpartPlot(hrModel$finalModel)
hr <- read.csv("HR_comma_sep.csv")
salary_classifier <- function(n){
if (n == 'high')
return("high")
else if(n == 'medium' || n == 'low')
return("average and low")
}
hr$salary <- sapply(hr$salary, salary_classifier)
View(head(hr))
?fancyRpartPlot
fancyRpartPlot(hrModel$finalModel, main="Employee Turnover Decision Tree", sub="Daniel Izaguirre", palettes="Blues")
hr$left <- NULL
library("ggplot2")
library("dplyr")
library("randomForest")
library("rattle")
library("caret")
library("rpart.plot")
# Describe the data
hr <- read.csv("HR_comma_sep.csv")
hr$left <- NULL
hr$type <- hr$sales
hr$sales <- NULL
View(head(hr))
set.seed(3792)
inTraining <- createDataPartition(y=hr$salary, p=0.6, list=FALSE)
trainingData <- hr[inTraining,]
testData <- hr[-inTraining,]
# Run the training data with the Decision Tree method.
hrModel <- train(salary~., data=trainingData, method="rpart")
hrModel
fancyRpartPlot(hrModel$finalModel, main="Employee Salary Decision Tree", sub="Daniel Izaguirre", palettes="Blues")
output: html_document
hr$sales <- NULL
testData <- hr[-inTraining,]
